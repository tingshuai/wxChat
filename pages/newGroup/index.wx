<template id="page">
  <view class="weui-toptips weui-toptips_warn" style="top:66px;" wx:if="{{ tip.showTopTips }}">{{ tip.tipMsg }}</view>
  <view class="pageContainer">
    <form catchsubmit="submitGroupData" catchreset="formCancel">

      <view class="weui-cells weui-cells_after-title" wx:if="{{ addMenu == 'false' }}">
          <view class="weui-cell weui-cell_input">
              <view class="weui-cell__hd">
                  <view class="weui-label label0">群名称<text class="xingxing {{  formRuler.groupName.require ? 'warnXing' : 'defaultXing' }}">*</text></view>
              </view>
              <view class="weui-cell__bd">
                  <input class="weui-input valueFont" value="{{ formData.groupName }}" bindinput="inputName" name="groupName" placeholder="请输入群名称" placeholder-class="placeholderClass"/>
              </view>
          </view>
          <!-- <view class="weui-cell weui-cell_select" wx:if="{{ edit == 'true' ? false : true}}"> -->
          <view class="weui-cell weui-cell_select">
              <view class="weui-cell__hd weui-cell__hd_in-select-after">
                  <view class="weui-label label0">父群组名称</view>
              </view>
              <view class="weui-cell__bd">
                  <picker disabled="{{ edit == 'true' }}" bindchange="bindGroupChange" value="{{formData.parentGroupIndex}}" range="{{ formData.parentGroupLst }}">
                      <view class="weui-select weui-select_in-select-after valueFont">{{formData.parentGroupValue}}</view>
                  </picker>
              </view>
          </view>
      </view>

      <!-- <view class="weui-cells__title" wx:if="{{ addMenu == 'false' }}">有效日期</view>
      <view class="weui-cells weui-cells_after-title" wx:if="{{ addMenu == 'false' }}">
          <view class="weui-cell weui-cell_select">
              <view class="weui-cell__hd weui-cell__hd_in-select-after">
                  <view class="weui-label label0">日期<text class="xingxing {{  formRuler.deadline.require ? 'warnXing' : 'defaultXing' }}">*</text></view>
              </view>
              <view class="weui-cell__bd">
                  <picker mode="date" name="deadline" value="{{ formData.date }}" start="{{ formData.startTime }}" bindchange="bindDateChange">
                    <view class="weui-input valueFont" style="text-align:right;padding-right:33rpx;">{{ formData.deadline }}</view>
                  </picker>
              </view>
          </view>
      </view> -->

      <view class="weui-cells__title" wx:if="{{ addMenu == 'false' }}">群描述</view>
      <view class="weui-cells weui-cells_after-title" wx:if="{{ addMenu == 'false' }}">
          <view class="weui-cell" style="padding:4px 15px;">
              <view class="weui-cell__bd" style="position:relative;z-index:0;">
                  <textarea fixed="{{ tag }}" placeholder-class="placeholderClass" value="{{ formData.groupDesc }}" class="weui-textarea fontValue" name="groupDesc" placeholder="请输入群描述" style="height: 3.3em;position:relative;" />
              </view>
          </view>
      </view>

      <view class="weui-cells__title" id="groupUser">群成员列表</view>
      <view class="weui-search-bar__form" style="height:90rpx;line-height:90rpx;border-bottom:0px;">
          <view class="weui-search-bar__box">
              <icon class="weui-icon-search_in-box" type="search" size="14"></icon>
              <input style="height:90rpx;" adjust-position="false" bindblur="inputBlur" type="text" class="weui-search-bar__input" placeholder="搜索群成员" value="{{formData.inputVal}}" bindinput="inputTyping" />
              <view class="weui-icon-clear" wx:if="{{ inputVal.length > 0 }}" bindtap="clearInput">
                  <icon type="clear" size="14"></icon>
              </view>
          </view>
      </view>

      <view class="weui-cells weui-cells_after-title">
          <checkbox-group bindchange="checkboxChange" name="{{ formData.selUser }}">
              <view class="weui-cell" wx:for="{{ formData.userList }}" wx:key="index" hidden="{{ item.hidden }}">
                 <image wx:if="{{ userMsg.openId == item.openId }}" data-item="{{ item }}" data-index="{{ index }}" class="headImg" mode="aspectFit" src="{{ item.headImgUrl }}"></image>
                 <image wx:else bindtap="tabHead" data-item="{{ item }}" data-index="{{ index }}" class="headImg" mode="aspectFit" src="{{ item.headImgUrl }}"></image>
                 <icon type="success" size="15" class="figure" wx:if="{{ item.isAddMember }}"></icon>
                 <view bindtap="{{ userMsg.openId == item.openId ? '' : 'tabHead' }}" class="weui-cell__bd userNickName" data-item="{{ item }}" data-index="{{ index }}">{{ item.username || item.nickname }}</view>
                 <checkbox color="#267AFC" disabled="{{ userMsg.openId == item.openId }}" class="weui-check nickCheckbox" disabled="{{ submitFormData.managerId == item.openId }}" value="{{ item.openId }}" checked="{{ item.checked }}"/>
                 <!-- {{ userMsg.openId }}-{{ item.openId }} -->
              </view>
          </checkbox-group>
      </view>
      <view style="margin-top:30px;text-align:center;" wx:if="{{ formData.userList.length == 0 }}">无成员信息</view>
      
      <ui-fixed-view bottom="0" left="0" right="0" class="fixBtn">
        <view class="fixed-view-content" style="padding:10px 35rpx;background-color:white;border-top:1px solid #efefef;">
          <view class="btn-area">
            <button type="primary" disabled = "{{ disabled }}" formType="submit" class="myBtnSuccess jingjingBtn">{{ btnTitle.title0 }}</button>
            <!-- <button formType="reset" class="jingjingBtn">取消</button> -->
          </view>
        </view>
      </ui-fixed-view>
    </form>
  </view>
</template>

<script>
import system from '../../static/utils/system'
var app = getApp();
export default {
  config: {
    navigationBarTitleText: '新建群组'
  },
  data: {
    headerHeight:"",//头部栏的高
    disabled:false,
    tip:{
      showTopTips:false,
      tipMsg:"",
      enable:true,
      tag:true
    },
    edit:"",//是否是编辑进来的。。。。
    addMenu:"",///是否是添加成员的....
    groupMsg:{},
    userMsg:{},
    formData:{
      date:'',
      groupName:"",
      groupDesc:"",//群描述的值..
      startTime:'',//日期讯择期的开始时间。。。。
      originGroupList:[], //获取到的原群列表....
      originUserList:[],//获取到的原用户列表.....
      parentGroupLst:[],  //父群组列表
      parentGroupIndex:0, //父群组下标....
      parentGroupValue:"",//选中的父群组的值
      userList:[],//用户列表
      selUser:[], //选中的群成员....
      deadline:"",//截止日期。。。
      inputVal:'',//搜索框的值
      keywords:'',//搜索群成员的关键字...
      selUserLebal:"",//选中的群主的lebal
      userListAll:[]//所有群成员
    },
    btnTitle:{
      title0:"新建群组"
    },
    submitFormData:{
      openIds:[], //选中的群成员ID
      parentId:'',//父群组id
      managerId:app.globalData.openId,//群主id
      addMemberOpenIds:[],//可拉人的成员
    },
    formRuler:{
      groupName:{
        require:true
      },
      deadline:{
        require:false
      }
    }
  },
  onLoad(option){
    let time = new Date();
    let that = this,promise, msg;
    system.stateMsg({ title:"加载中...",content:"",icon:"loading",time:8000});
    time.setDate(time.getDate()+1)
    let startTime = `${time.getFullYear()}-${time.getUTCMonth() + 1}-${time.getUTCDate()}`
    that.setData({
      "addMenu":option.addMenu,
      "userMsg":app.globalData.userMsgReq,
      ['formData.startTime']:startTime,
      "edit":option.edit,
      "headerHeight":app.globalData.headHeight,
    })
    wx.setNavigationBarTitle({
      title: option.edit == "true" ? option.addMenu == 'true' ? "添加成员" : "编辑群组" : "新建群组",
    })    
    promise = new Promise((resolve,reject)=>{//先请求群列表再请求用户列表....
      let pro = new Promise((resolve2,reject2)=>{
        that.reqGroupList(resolve2);//请求群组列表.........
      })
      pro.then(()=>{
        that.reqUserList( "", resolve );//请求用户列表.....
      })
    })
    if( option.edit == "false" ){//新增群组
      that.setData({
        ['formData.startTime']:startTime,
        ['submitFormData.managerId']:app.globalData.openId,
      })
      promise.then(()=>{
        that.data.formData.userList.filter((item)=>{
          if( item.openId == app.globalData.openId ){
            item.checked = true;
            item.isAddMember = true;
          }
        })
        that.setData({
          ['formData.userList']:that.data.formData.userList
        })
      })
    }else{//编辑群组...
      msg = JSON.parse(option.groupMsg);
      that.setData({
        "groupMsg":msg
      })
      promise.then((that)=>{
        if(option.edit == "true"){//编辑&拉人
          that.setData({
            ['formData.groupName']:msg.groupName,
            ['formData.deadline']:msg.deadline,
            ['formData.date']:msg.deadline,
            ['formData.groupDesc']:msg.groupDesc,
            ["formRuler.deadline.require"]:false,
            ["formRuler.groupName.require"]:false,
            ['submitFormData.managerId']:msg.managerId,
            ['submitFormData.deadline']:msg.deadline,
            ['submitFormData.parentId']:msg.parentId,
            ['btnTitle.title0']:"提交"
          });
          that.upUserList();
        }
      })
    }
  },
  upUserList(){
    let that = this;
    let openIds = [],list_1;
    that.data.groupMsg.groupUsers.forEach((value,ii,array)=>{
      list_1 = that.data.formData.userList.filter(( val )=>{
        if( val.openId == value.openId ){
          val.checked = true;
          openIds.push( value.openId )
          if(value.authAddMember){
            val.isAddMember = true;
          }
        }else{
          return 
        }
      })
      value.checked = true;
      if(value.authAddMember){
        value.isAddMember = true;
      }else{
        value.isAddMember = false;
      }
    })
    let _b = that.data.formData.userList.filter( (item)=>{//将父群组和子群组中的人合并去重....
      let _a = that.data.groupMsg.groupUsers.findIndex((val,i,arr)=>{
        return val.openId == item.openId
      })
      if( _a == -1 ){
        return item
      }
    })
    let newUserList = _b.concat( that.data.groupMsg.groupUsers );
    that.setData({
      ["formData.userList"]:newUserList,
      ['submitFormData.openIds']:openIds,
    })
  },
  tabHead(e){
    let that = this;
    let _item = e.currentTarget.dataset;
    if( that.data.addMenu == "true" ){
      if( that.data.submitFormData.managerId != _item.item.openId ){
        that.data.formData.userList[_item.index].checked = true;
        that.data.formData.userList[_item.index].isAddMember = !that.data.formData.userList[_item.index].isAddMember;
        this.setData({
          ['formData.userList']:that.data.formData.userList
        })
      }
    }else{
      that.data.formData.userList[_item.index].checked = true;
      that.data.formData.userList[_item.index].isAddMember = !that.data.formData.userList[_item.index].isAddMember;
      this.setData({
        ['formData.userList']:that.data.formData.userList
      })
    }
  },
  inputBlur(e){//搜索输入框失焦失
    // debugger;
  },
  bindDateChange(e){
    this.setData({
      ['formData.deadline']:e.detail.value,
      ["formRuler.deadline.require"]:false
    })
  },
  inputTyping(e){
    let that = this;
    this.setData({
      ['formData.keywords']:e.detail.value
    })
    var patt1 = new RegExp(`${e.detail.value}`);
    this.data.formData.userList.forEach((val,i,arr)=>{
      if( patt1.test( val.username) ){
        val.hidden = false;
      }else{
        val.hidden = true;
      }
    })
    this.setData({
      ['formData.userList']:that.data.formData.userList
    })
  },
  formCancel (e) {
    let that = this;
    if( this.data.edit == "true" ){
      wx.navigateBack({
        delta: 1
      })
    }else{
      wx.navigateTo({
        url: '/pages/home/index'
      })
    }
  },
  checkboxChange(e){
    let list=[];
    let that = this;
    that.data.formData.userList.filter((item)=>{
      item.checked = false;
    })
    e.detail.value.forEach((val,i,arr)=>{
      list = this.data.formData.userList.filter((item)=>{
        if( item.openId == val ){
          return item;
        }
      })
      that.data.formData.userList.forEach(( value,ii,array )=>{
        if( val == value.openId ){
          array[ii].checked = true;
        }
      })
    })
    that.data.formData.userList.filter((item)=>{
      item.checked == false ? item.isAddMember = false : null;
    })
    this.setData({
      ['formData.originUserList']:list,
      ['formData.userList']:that.data.formData.userList
    })
  },
  bindGroupChange(e){
    let that = this;
    if(e.detail.value == 0){
      that.setData({
        ['formData.userList']:that.data.formData.userListAll,
        ['formData.parentGroupValue']:that.data.formData.parentGroupLst[e.detail.value]
      })
    }else{
      that.data.formData.originGroupList.filter((value)=>{
        if( value.groupName == that.data.formData.parentGroupLst[e.detail.value] ){
          this.setData({
            ['formData.parentGroupValue']:that.data.formData.parentGroupLst[e.detail.value],
            ['submitFormData.parentId']:value.groupId,
            ['formData.userList']:that.data.formData.originGroupList[e.detail.value-1].groupUsers
          })
          that.data.formData.userList.filter((item)=>{
            if( item.openId == app.globalData.openId ){
                item.checked = true;
                item.isAddMember =true;
                this.setData({
                  ['formData.userList']:that.data.formData.userList
                })
            }
          })
        }
      })
    }
  },
  reqGroupList(resolve2){
    let that = this;
    system.http({
      url:'chat/groups/tree',
      method:'get',
      param:{
        "openId":app.globalData.openId,
        "pageSize":0
      },
      scb(res){
        that.data.formData.parentGroupLst.push("不填");
        res.data.data.rows.forEach((val,i,arr)=>{
          if ( val.managerId == app.globalData.openId ) {
            that.data.formData.parentGroupLst.push( val.groupName )
          }
        })
        that.setData({
          ['formData.originGroupList']:res.data.data.rows,
          ['formData.parentGroupLst']:that.data.formData.parentGroupLst
        })
        resolve2 ? resolve2() : null ;
      },
      fcb(res){system.stateMsg({title:"获取群列表失败！",time:1000})}
    })
  },
  inputName(e){
    if( e.detail.value != '' ){
      this.setData({
        ["formRuler.groupName.require"]:false
      })
    }else{
      this.setData({
        ["formRuler.groupName.require"]:true
      })
    }
  },
  submitGroupData(e){
    let that = this;
    this.setData({
      ["submitFormData.openIds"]:[],
      "disabled":true
    })
    that.data.formData.userList.filter((item)=>{
      if( item.checked ){
        that.data.submitFormData.openIds.push(item.openId);
      }
    })
    this.setData({
      ["submitFormData.openIds"]:that.data.submitFormData.openIds
    })    
    let promise = new Promise((resolve,reject)=>{
      if( !that.data.formRuler.groupName.require && !that.data.formRuler.deadline.require ){
        if( that.data.submitFormData.openIds.length < 3 ){
          system.stateMsg({title:"成员人数不能小于3人",icon:"none",time:1500});
          wx.hideToast();
        }else{
          resolve();
        }
      }else{
        that.setData({
          ["tip.showTopTips"]:true,
          ["tip.enable"]:true,
          ["tip.tipMsg"]:"请补充完带星号内容"
        })
        setTimeout(function(){
          that.setData({
            ["tip.showTopTips"]:false
          })
        },1000)
      }
    })
    promise.then(()=>{
      that.data.formData.userList.forEach((val,i,arr)=>{
        val.isAddMember == true ? that.data.submitFormData.addMemberOpenIds.push(val.openId) : null;
      })
      that.setData({
        ['submitFormData.addMemberOpenIds']:that.data.submitFormData.addMemberOpenIds
      })
      let formData = Object.assign({},e.detail.value,that.data.submitFormData);
      if(that.data.edit == 'true'){
        formData.groupId = that.data.groupMsg.groupId;
      }
      delete formData.deadline;
      system.http({
        url: that.data.edit == 'true' ? `chat/groups/${that.data.groupMsg.groupId}` : 'chat/groups',//新增&修改....
        method:'post',
        header:{'content-type': 'application/x-www-form-urlencoded'},
        param: formData,
        scb(res){
          that.setData({
            "disabled":false
          })          
          wx.hideToast();
          let tip = that.data.edit == 'true' ? "修改群组成功" : '新增群组成功';
          if(res.data.status == 200){
            wx.navigateBack();
            system.stateMsg({title: tip,icon:"success",time:1000});
          }else{
            system.stateMsg({title:res.data.message,icon:"none",time:1000})
          }
        },
        fcb(res){
          that.setData({
            "disabled":false
          })
          system.stateMsg({title:that.data.edit == 'true' ? "修改群组失败" : '新增群组失败',icon:"none",time:1000})
        }
      })
    })
  },
  navigateBack () {
    wx.navigateBack()
  },
  reqUserList(keywords="",resolve){///请求用户列表.
    let that = this;
    system.http({
      url:'chat/users',
      method:'get',
      param:{
        "keywords":keywords,
        "pageSize":0,
        "status":1
      },
      scb(res){
        if(res.data.status == 200){
          wx.hideToast();
          if( that.data.edit == "true"){//编辑群组....
            if( that.data.groupMsg.parentId == "0" ){//父群
                res.data.data.rows.forEach((value,ii,array)=>{
                  array[ii].checked = false;
                  array[ii].isAddMember = false;
                })
                that.setData({
                  ['formData.userList']:res.data.data.rows,
                  ['formData.userListAll']:res.data.data.rows,
                  ['formData.parentGroupValue']:"无"
                })
            }else{//子群....
              that.data.formData.originGroupList.forEach((val,i,arr)=>{
                if( val.groupId == that.data.groupMsg.parentId ){//查找父群
                  val.groupUsers.forEach((value,ii,array)=>{
                    array[ii].checked = false;
                    array[ii].isAddMember = false;
                  })
                  that.setData({
                    ['formData.userList']:val.groupUsers,
                    ['formData.userListAll']:val.groupUsers,
                    ['formData.parentGroupValue']:val.groupName
                  })
                }
              })
            }
            that.data.groupMsg.groupUsers.forEach((value,ii,array)=>{
              that.data.formData.userList.filter((val,i,arr)=>{
                if(val.openId == value.openId){
                  val.checked = true;
                  if(value.authAddMember){
                    val.isAddMember = true;
                  }
                }
              })
            })
            that.setData({
              ['formData.userList']:that.data.formData.userList,
            })
          }else{//新增群组
            res.data.data.rows.forEach((val,i,arr)=>{
              if(val.openId == app.globalData.openId){
                arr[i].checked = true;
                arr[i].isAddMember = true;
              }else{
                arr[i].checked = false;
                arr[i].isAddMember = false;
              }
            })
            that.setData({
              ['formData.userList']:res.data.data.rows,
              ['formData.userListAll']:res.data.data.rows
            })
          }
          resolve ? resolve(that) : null ;
        }else{
          system.stateMsg({title:res.data.data.message,time:1000})
          wx.hideToast();
        }
      },
      fcb(res){
        system.stateMsg({title:"获取成员失败！",time:1000})
      }
    })
  }
}
</script>

<style lang="less">
.pageContainer{
  padding-top:5px;
  width:100%;
  padding-bottom:130px;
}
.warnXing{
  color: red;
}
.defaultXing{
  color: black;
}
  .weui-check{
    position: relative;
    left: 0;
  }
  .placeholderClass{
    font-size: 28rpx;
  }
  .headImg{
    width: 65rpx;
    height: 65rpx;
    margin-right: 20rpx;
  }
  .userNickName{
    font-size: 30rpx;
    .mix-text-overflow();
  }
  .nickCheckbox{
    left: 14rpx;
  }
  .label0{
    font-size: 28rpx;
  }
  .fontValue{
    font-size:28rpx;
    line-height:28rpx;
    min-height: 100rpx;
  }
  .figure{
    position: absolute;
    font-size: 22rpx;
    // background-color: antiquewhite;
    top:10rpx;
    left: 10rpx;;
  }
  .valueFont{
    font-size:13px;
    height:44px;
    line-height:44px;
  }
  page{
    overflow-y:auto;
    width:100%;
  }
</style>
